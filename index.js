import { Transform } from 'node:stream';
import mic from 'mic';
import fs from 'node:fs/promises';
import path from 'node:path';
import play from 'play-sound';
import { nodewhisper } from 'nodejs-whisper';
import { ChatOllama } from "@langchain/ollama";
import { createReactAgent } from "langchain/agents";
import { pull } from "langchain/hub";
import { AgentExecutor } from "langchain/agents";
import { DynamicTool } from "@langchain/core/tools";
import { exec } from 'node:child_process';
import { promisify } from 'node:util';
import ZonosJS from 'zonosjs';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const execAsync = promisify(exec);

const SAMPLE_RATE = 16000;
const SILENCE_TIMEOUT = 2000;
const player = play({ players: ['mpg123'] });
const zonosClient = new ZonosJS();

// –ö–∞—Å—Ç–æ–º–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
const customTool = new DynamicTool({
  name: "semantic",
  description: "–∑–∞–ø—Ä–æ—Å –∫ –ø–∞–∫–µ—Ç—É —Å–µ–º–∞–Ω—Ç–∏–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)",
  func: async (input) => `–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è "${input}"`,
});


const llm = new ChatOllama({
  model: "deepseek-r1:1.5b",
  baseUrl: "http://localhost:11434",
  temperature: 0.1,
});

let executor;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≥–µ–Ω—Ç–∞
async function setupAgent() {
  const prompt = await pull("hwchase17/react");
  const agent = await createReactAgent({
    llm,
    tools: [customTool],
    prompt,
  });
  executor = AgentExecutor.fromAgentAndTools({
    agent,
    tools: [customTool],
    handleParsingErrors: true,
  });
}


function createVoiceDetector() {
  let silenceTimer = null;
  const vad = new Transform({
    transform(chunk, encoding, callback) {
      const energy = calculateEnergy(chunk);
      if (energy > 0.0005) {
        if (silenceTimer) clearTimeout(silenceTimer);
        silenceTimer = setTimeout(() => {
          vad.emit('silence');
        }, SILENCE_TIMEOUT);
      } else if (!silenceTimer) {
        silenceTimer = setTimeout(() => {
          vad.emit('silence');
        }, SILENCE_TIMEOUT);
      }
      this.push(chunk);
      callback();
    }
  });

  function calculateEnergy(chunk) {
    let energy = 0;
    for (let i = 0; i < chunk.length; i += 2) {
      energy += Math.abs(chunk.readInt16LE(i));
    }
    return energy / (chunk.length / 2) / 32767;
  }

  return vad;
}


async function listen() {
  return new Promise((resolve, reject) => {
    const micInstance = mic({
      rate: String(SAMPLE_RATE),
      channels: '1',
      device: 'default',
      format: 'S16_LE',
      debug: false,
      exitOnSilence: 0
    });

    const audioChunks = [];
    const vad = createVoiceDetector();
    const audioStream = micInstance.getAudioStream();

    audioStream
      .pipe(vad)
      .on('data', chunk => audioChunks.push(chunk))
      .on('error', reject);

    vad.on('silence', () => micInstance.stop());

    audioStream
      .on('startComplete', () => console.log('üé§ –°–ª—É—à–∞—é...'))
      .on('stopComplete', () => resolve(Buffer.concat(audioChunks)));

    const timeout = setTimeout(() => {
      micInstance.stop();
      reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Å–∏'));
    }, 30000);

    micInstance.start();
    audioStream.on('stopComplete', () => clearTimeout(timeout));
  });
}


async function convertToWav(audioInput) {
  const tempOutputFile = path.join(process.cwd(), `converted_${Date.now()}.wav`);
  let ffmpegCommand;

  if (typeof audioInput === 'string') {
    // –ï—Å–ª–∏ –≤—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    ffmpegCommand = `ffmpeg -i "${audioInput}" -ar 16000 -ac 1 -f wav "${tempOutputFile}" -y`;
  } else {
    // –ï—Å–ª–∏ –≤—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî –±—É—Ñ–µ—Ä
    const tempInputFile = path.join(process.cwd(), `raw_${Date.now()}.pcm`);
    await fs.writeFile(tempInputFile, audioInput);
    ffmpegCommand = `ffmpeg -f s16le -ar ${SAMPLE_RATE} -ac 1 -i "${tempInputFile}" -ar 16000 -ac 1 -f wav "${tempOutputFile}" -y`;
    await execAsync(ffmpegCommand);
    await fs.unlink(tempInputFile);
    return tempOutputFile;
  }

  try {
    await execAsync(ffmpegCommand);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
    const durationCheck = await execAsync(`ffprobe -i "${tempOutputFile}" -show_entries format=duration -v quiet -of csv="p=0"`);
    const duration = parseFloat(durationCheck.stdout);
    if (duration < 1) {
      // –î–æ–±–∞–≤–ª—è–µ–º 1 —Å–µ–∫—É–Ω–¥—É —Ç–∏—à–∏–Ω—ã –≤ –∫–æ–Ω–µ—Ü, –µ—Å–ª–∏ —Ñ–∞–π–ª –∫–æ—Ä–æ—á–µ 1 —Å–µ–∫—É–Ω–¥—ã
      const paddedFile = path.join(process.cwd(), `padded_${Date.now()}.wav`);
      await execAsync(`ffmpeg -i "${tempOutputFile}" -af "apad=pad_dur=1" -ar 16000 -ac 1 "${paddedFile}" -y`);
      await fs.unlink(tempOutputFile);
      return paddedFile;
    }
    return tempOutputFile;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', err);
    throw err;
  }
}

async function transcribe(audioBuffer) {
  const wavFile = await convertToWav(audioBuffer);
  const textFile = `${wavFile}.txt`;
  try {
    const result = await nodewhisper(wavFile, {
      modelName: 'base',
      autoDownloadModelName: 'base',
      removeWavFileAfterTranscription: true,
      whisperOptions: {
        outputInText: true,
        language: 'ru',
      },
    });
    if (result.text) return result.text;
    const transcribedText = await fs.readFile(textFile, 'utf8');
    return transcribedText.trim() || "–û—à–∏–±–∫–∞: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å";
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:', err);
    return "–û—à–∏–±–∫–∞: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å";
  } finally {
    await fs.unlink(textFile).catch(() => {});
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek
async function brainAppeal(text) {
  if (!text || text === "–û—à–∏–±–∫–∞: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å") {
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.";
  }
  console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç...');
  const prompt = [
    { role: "system", content: "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π." },
    { role: "user", content: text }
  ];
  const response = await llm.invoke(prompt);
  return response.content;
}

async function voice(text) {
  console.log('–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ—á–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞:', text);
  try {
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ ZonosJS...');
    const audioBuffer = await zonosClient.generateSpeech(text, './reference.wav', 'ru');
    console.log('–ê—É–¥–∏–æ –ø–æ–ª—É—á–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞:', audioBuffer.length);

    const audioDir = path.join(__dirname, 'audio');
    await fs.mkdir(audioDir, { recursive: true }).catch(() => {}); 

    const outputFile = path.join(audioDir, `response_${Date.now()}.wav`);
    console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª:', outputFile);
    await fs.writeFile(outputFile, audioBuffer);
    console.log('–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω');

    console.log('–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ...');
    await new Promise((resolve, reject) => {
      player.play(outputFile, (err) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', err);
          reject(err);
        } else {
          console.log('–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
          resolve();
        }
      });
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ voice:', error.message);
  }
}

async function mainLoop() {
  await setupAgent();
  while (true) {
    try {
      const audio = await listen();
      // const audio = "/workspace/InnerEcho/reference.wav";
      const text = await transcribe(audio);
      console.log('–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:', text);
      const response = await brainAppeal(text);
      // const response = "–ø—Ä–∏–≤–µ—Ç"
      console.log('–û—Ç–≤–µ—Ç AI:', response);
      await voice(response);
      await new Promise(resolve => setTimeout(resolve, 500));
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ:', err);
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }
}

mainLoop().catch(console.error);